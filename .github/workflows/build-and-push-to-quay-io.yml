# This workflow is based on the OpenShift workflow provided by red-hat-actions

name: "Build Container Image and Push to Quay.io"

# In order for the workflow to run correctly, some configuration is needed. In particular, the GitHub 
# secrets need te be created. 
env:
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  OPENSHIFT_NAMESPACE: ""

  APP_NAME: "do2day"
  APP_PORT: "8080"

  IMAGE_REGISTRY: quay.io
  IMAGE_REGISTRY_USER: ${{ secrets.QUAY_USERNAME }}
#IMAGE_REGISTRY_PASSWORD: ${{ secrets.QUAY_PASSWORD }}

  IMAGE_TAGS: ""

on:
  push:
    branches: 
      - 'main'
      - 'workflows'
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build Container Image and Push to Quay.io
    runs-on: ubuntu-latest
    environment: production

    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}

    steps:
    - name: Check out repository
      uses: actions/checkout@v2
    
    - name: Determine app name
      if: env.APP_NAME == ''
      run: |
        echo "APP_NAME=$(basename $PWD)" | tee -a $GITHUB_ENV

    - name: Determine image tags
      if: env.IMAGE_TAGS == ''
      run: |
        echo "IMAGE_TAGS=latest ${GITHUB_SHA::12}" | tee -a $GITHUB_ENV

    # https://github.com/redhat-actions/buildah-build#readme
    - name: Build from Dockerfile
      id: build-image
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ env.APP_NAME }}
        tags: ${{ env.IMAGE_TAGS }}

        # If you don't have a Dockerfile/Containerfile, refer to https://github.com/redhat-actions/buildah-build#scratch-build-inputs
        # Or, perform a source-to-image build using https://github.com/redhat-actions/s2i-build
        # Otherwise, point this to your Dockerfile/Containerfile relative to the repository root.
        dockerfiles: |
          ./Dockerfile

    # https://github.com/redhat-actions/push-to-registry#readme
    - name: Push to registry
      id: push-image
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build-image.outputs.image }}
        tags: ${{ steps.build-image.outputs.tags }}
        registry: ${{ env.IMAGE_REGISTRY }}
        username: ${{ env.IMAGE_REGISTRY_USER }}
        password: ${{ env.IMAGE_REGISTRY_PASSWORD }}

