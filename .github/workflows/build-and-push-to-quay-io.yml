name: Build container image and push to quay.io

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:


env:
  IMAGE_REGISTRY_NAME: quay.io
  IMAGE_NAME: do2day/backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Check for required secrets
        uses: actions/github-script@v4
        with:
          script: |
            const secrets = 
            {
              ROBOT_ACCOUNT_NAME: `${{ secrets.ROBOT_ACCOUNT_NAME }}`,
              IMAGE_REGISTRY_PASSWORD: `${{ secrets.IMAGE_REGISTRY_PASSWORD }}`,
            };

            const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => 
            {
              if(value.length === 0) 
              {
                core.error(`Secret "${name}" is not set`);
              }
              else
              {
                core.info(`✔️ Secret "${name}" is set`);
              }
              
              return;
            });

            if(missingSecrets.length > 0) 
            {
              core.setFailed(`❌ At least one required secret is not set in the repository. \n`);
            }
            else 
            {
              core.info(`✅ All the required secrets are set`);
            }

      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Determine image tags
        if: env.IMAGE_TAGS == ''
        run: |
          echo "IMAGE_TAGS=latest ${GITHUB_SHA::12}" | tee -a $GITHUB_ENV
      
      - name: Build from Dockerfile
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ env.IMAGE_TAGS }}
          dockerfiles: |
            ./Dockerfile

      - name: Push to registry
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY_NAME }}
          username: ${{ secrets.ROBOT_ACCOUNT_NAME }}
          password: ${{ secrets.IMAGE_REGISTRY_PASSWORD }} 

